
#
# This script must be executed from the scripts/ folder.
#
if [ `basename $PWD` != scripts ]
then
  if [ -d scripts ]
  then
    # The directory stack is automatically reset on script exit.
    pushd scripts/ > /dev/null
  else
    echo ERROR: scripts/ directory not found.
    exit 1
  fi
fi

git fetch --tags
# Get the current branch name from the second argument
BRANCH_NAME=$2
echo "The branch name is: ${BRANCH_NAME}"

# Get the current version from the latest tag on main
VERSION_TEXT=$(git describe --tags origin/main)


MAJOR=0
MINOR=0
PATCH=0

# Get the version number from the version text. 
if [[ $VERSION_TEXT =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
    MAJOR=${BASH_REMATCH[1]}
    MINOR=${BASH_REMATCH[2]}
    PATCH=${BASH_REMATCH[3]}
fi

echo "Latest version is: ${MAJOR}.${MINOR}.${PATCH}"

# Checkout the branch
git checkout ${BRANCH_NAME}


# Get the first argument that is given to this script. 
# It should describe the type of version update.
ARGUMENT=$1
echo "The first argument is: ${ARGUMENT}"

# Check the type of version update
if [[ $ARGUMENT == *"MAJOR"* ]]; then
    MAJOR=$((MAJOR + 1))
    MINOR=0
    PATCH=0
    echo "This is a major version update."
elif [[ $ARGUMENT == *"MINOR"* ]]; then
    MINOR=$((MINOR + 1))
    PATCH=0
    echo "This is a minor version update."
elif [[ $ARGUMENT == *"PATCH"* ]]; then
    PATCH=$((PATCH + 1))
    echo "This is a patch version update."
else
    echo "No version update info given."
    exit 1
fi

# Set the new version text
NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"

# Check that the new version is indeed larger than the latest version
if [[ $MAJOR -lt ${BASH_REMATCH[1]} || ($MAJOR -eq ${BASH_REMATCH[1]} && $MINOR -lt ${BASH_REMATCH[2]}) || ($MAJOR -eq ${BASH_REMATCH[1]} && $MINOR -eq ${BASH_REMATCH[2]} && $PATCH -le ${BASH_REMATCH[3]}) ]]; then
    echo "The new version must be greater than the latest version."
    exit 1
fi

echo "NEW_VERSION: ${NEW_VERSION}"
NEW_VERSION_TEXT="v${NEW_VERSION}"

echo "The new version is set to ${NEW_VERSION_TEXT}"

# Update the version in the citation file
sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${NEW_VERSION}/" ../CITATION.cff

# Update the date-released in the citation file. 
CURRENT_DATE=$(date +%F)
sed -i "s/date-released: [0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}/date-released: ${CURRENT_DATE}/" CITATION.cff

GIT_COMMIT_MESSAGE="Updated the version to ${NEW_VERSION}"

# Add the changes to a new commit
git config user.name Davknapp


echo "git add version.txt"
git add CITATION.cff
echo "git commit -m $GIT_COMMIT_MESSAGE"
git commit -m "$GIT_COMMIT_MESSAGE"

echo "git tag"
# Tag the new version in git
if git tag -a $NEW_VERSION_TEXT -m "Version $NEW_VERSION_TEXT"; then
    echo "Tag created successfully"
    git push origin ${BRANCH_NAME} --tags
else
    echo "Failed to create tag"
    exit 1
fi