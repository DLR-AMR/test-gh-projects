name: "Move the Issue after workload and urgency is evaluated"

on:
  issues:
    types: [labeled]

jobs:
  evaluate:
    runs-on: ubuntu-latest
    steps:
      - name: "Check if workload is set"
        id: check_workload
        if: |
          contains(join(github.event.issue.labels.*.name, ','), 'workload:high') ||
          contains(join(github.event.issue.labels.*.name, ','), 'workload:medium') ||
          contains(join(github.event.issue.labels.*.name, ','), 'workload:low')
        run: |
            echo "WORKLOAD_SET=true" >> $GITHUB_ENV
      - name: "Check if priority is set"
        id: check_urgency
        if: |
          contains(join(github.event.issue.labels.*.name, ','), 'priority:high') ||
          contains(join(github.event.issue.labels.*.name, ','), 'priority:medium') ||
          contains(join(github.event.issue.labels.*.name, ','), 'priority:low')
        run: |
            echo "PRIORITY_SET=true" >> $GITHUB_ENV
      - name: "Find associated Projects"
        id: find_projects
        env:
          ORGANIZATION: DLR-AMR
          GH_TOKEN: ${{ secrets.TEST_SECRET }}
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(first: 20) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION > project_data.json
            echo project_data.json
      - name: "Move issue to 'Todo' column in associated projects"
        if: env.WORKLOAD_SET == 'true' && env.PRIORITY_SET == 'true'
        run: |
            echo "${{ github.event.issue.node_id }}"
            echo "projects=${{ steps.find_projects.outputs.projects }}"
            #for project in $projects; do
            #  project_id=$(echo $project | jq -r '.data.organization.projectsV2.nodes[].id')
            #  echo "project_id is $project_id"
            #  issues=$(curl --request POST \
            #                --url https://api.github.com/graphql \
            #                --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
            #                --data '{"query":
            #                    "{node(id: \"'$project_id'\") { ... on ProjectV2 {items(first: 20) { nodes{ id fieldValues(first: 8) { nodes{ ... on ProjectV2ItemFieldTextValue { text field { ... on ProjectV2FieldCommon { name }}} ... on ProjectV2ItemFieldDateValue { date field { ... on ProjectV2FieldCommon { name  id} } } ... on ProjectV2ItemFieldSingleSelectValue { name field { ... on ProjectV2FieldCommon { name id options {id name}}}}}} content{ ... on Issue {title id}} } } } } }"}')
            #  echo "issues=$issues"
            #  issue_ids=$(echo $issues | jq -r '.data.node.items.nodes[].content.id')
            #  PVII_ids=$(echo $issues | jq -r '.data.node.items.nodes[].id')
            #  combined_ids=$(paste -d, <(echo "$issue_ids") <(echo "$PVII_ids"))
            #  echo "combined_ids=$combined_ids"
            #  for issue in $issues; do
            #    issue_id=$(echo $issue | jq -r '.data.node.items.nodes[].content.id')
            #    echo "issue_id is $issue_id"
            #    if [ $issue_id == '${{ github.event.issue.node_id }}' ]; then
            #      #get additional information
            #      detailed_project=$(curl --request POST \
            #                --url https://api.github.com/graphql \
            #                --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
            #                --data '{"query":"{organization(login: \"DLR-AMR\") {projectV2(number: $project_id) {id fields(first: 20) {nodes {... on ProjectV2Field {id name} ... on ProjectV2SingleSelectField {id name options {id name}}}}})}")}"')
            #      echo "detailed_project=$detailed_project"
            #      ToDo_Option_id=$(echo $detailed_project | jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "ToDo") | .id')          
            #      PVII_id=$(echo $issue | jq -r '.data.node.items.nodes[].id')

            #      echo "PVII_id is $PVII_id"
            #      # Get the field id of the 'Status' field
            #      status_field_id=$(echo $issues | jq -r '.data.node.items.nodes[].fieldValues.nodes[] | select(.field.name == "Status") | .field.id')
            #      echo "status_field_id is $status_field_id"
            #      echo "change field $status_field_id of issue $issue_id in project $project_id to 'ToDo'"
            #      response=$(curl --request POST \
            #        --url https://api.github.com/graphql \
            #        --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
            #        --data '{"query":"mutation {updateProjectV2ItemFieldValue(input: {projectId: \"'$project_id'\", itemId: \"'$PVII_id'\", fieldId: \"'$status_field_id'\", value: { singleSelectOptionId: $ToDo_Option_id}}) {projectV2Item {id}}}"}')
            #      echo "response=$response"
            #    fi
            #  done
            #done