name: "Move the Issue after workload and urgency is evaluated"

on:
  issues:
    types: [labeled]

jobs:
  evaluate:
    runs-on: ubuntu-latest
    steps:
      - name: "Check if workload is set"
        id: check_workload
        if: |
          contains(join(github.event.issue.labels.*.name, ','), 'workload:high') ||
          contains(join(github.event.issue.labels.*.name, ','), 'workload:medium') ||
          contains(join(github.event.issue.labels.*.name, ','), 'workload:low')
        run: |
            echo "WORKLOAD_SET=true" >> $GITHUB_ENV
      - name: "Check if priority is set"
        id: check_urgency
        if: |
          contains(join(github.event.issue.labels.*.name, ','), 'priority:high') ||
          contains(join(github.event.issue.labels.*.name, ','), 'priority:medium') ||
          contains(join(github.event.issue.labels.*.name, ','), 'priority:low')
        run: |
            echo "PRIORITY_SET=true" >> $GITHUB_ENV
      - name: "Find associated Projects"
        id: find_projects
        run: |
          projects=$(curl --request POST \
                            --url https://api.github.com/graphql \
                            --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                            --data '{"query":"{organization(login: \"DLR-AMR\") {projectsV2(first: 20) {nodes {id title}}}}"}')
          echo "projects=$projects">> $GITHUB_OUTPUT
      - name: "Move issue to 'Todo' column in associated projects"
        if: env.WORKLOAD_SET == 'true' && env.PRIORITY_SET == 'true'
        run: |
            project_ids=$(echo '${{ steps.find_projects.outputs.projects }}' | jq -r '.data.organization.projectsV2.nodes[].id')
            echo "project_ids=${project_ids}"
            echo "searching for issue ${{ github.event.issue.node_id }}"
            for project_id in $project_ids; do
              echo "project_id is $project_id"
              issues=$(curl --request POST \
                            --url https://api.github.com/graphql \
                            --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                            --data "{\"query\":\"{node(id: $project_id) { ... on ProjectV2 {items(first: 20) { nodes{ id fieldValues(first: 8) } content{ ... on Issue {title id}} } } } } }\"}")
              echo "issues=$issues"
              issue_ids=$(echo $issues | jq -r '.data.node.items.nodes[].content.id')
              PVII_ids=$(echo $issues | jq -r '.data.node.items.nodes[].id')
              combined_ids=$(paste -d, <(echo "$issue_ids") <(echo "$PVII_ids"))
              for combined_id in $combined_ids; do
                issue_id=$(echo $combined_id | cut -d, -f1)
                PVII_id=$(echo $combined_id | cut -d, -f2)
                echo "issue_id is $issue_id"
                echo "PVII_id is $PVII_id"
                if [$issue_id == '${{ github.event.issue.node_id }}']; then
                  detailed_project=$(curl --request POST \
                            --url https://api.github.com/graphql \
                            --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                            --data '{"query":"{organization(login: \"DLR-AMR\") {projectV2(number: $project_id) {id fields(first: 20) {nodes {... on ProjectV2Field {id name} ... on ProjectV2SingleSelectField {id name options {id name}}}}})}")}"')
                
                  echo "detailed_project=$detailed_project"
                  status_field_id=$(echo $issues | jq -r '.data.node.items.nodes[].fieldValues.nodes[] | select(.field.name == "Status") | .field.id')
                  echo "status_field_id is $status_field_id"
                  ToDo_Option_id=$(echo $detailed_project | jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "ToDo") | .id')
                  echo "ToDo_Option_id is $ToDo_Option_id"
                  echo "change field $status_field_id of issue $issue_id in project $project_id to 'ToDo'"
                  response=$(curl --request POST \
                    --url https://api.github.com/graphql \
                    --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                    --data '{"query":"mutation {updateProjectV2ItemFieldValue(input: {projectId: \"'$project_id'\", itemId: \"'$PVII_id'\", fieldId: \"'$status_field_id'\", value: { singleSelectOptionId: $ToDo_Option_id}}) {projectV2Item {id}}}"}')
                  echo "response=$response"
                fi
              done
            done