name: "Move the Issue after workload and urgency is evaluated"

on:
  issues:
    types: [labeled]

jobs:
  evaluate:
    runs-on: ubuntu-latest
    steps:
      - name: "Check if workload is set"
        id: check_workload
        if: |
          contains(join(github.event.issue.labels.*.name, ','), 'workload:high') ||
          contains(join(github.event.issue.labels.*.name, ','), 'workload:medium') ||
          contains(join(github.event.issue.labels.*.name, ','), 'workload:low')
        run: |
            echo "WORKLOAD_SET=true" >> $GITHUB_ENV
      - name: "Check if priority is set"
        id: check_urgency
        if: |
          contains(join(github.event.issue.labels.*.name, ','), 'priority:high') ||
          contains(join(github.event.issue.labels.*.name, ','), 'priority:medium') ||
          contains(join(github.event.issue.labels.*.name, ','), 'priority:low')
        run: |
            echo "PRIORITY_SET=true" >> $GITHUB_ENV
      - name: "Find associated Projects"
        id: find_projects
        run: |
          project_node_ids=$(curl --request POST \
                            --url https://api.github.com/graphql \
                            --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                            --data '{"query":"{organization(login: \"DLR-AMR\") {projectsV2(first: 20) {nodes {id title}}}}"}')
          echo "project_node_ids=${project_node_ids}" >> $GITHUB_OUTPUT
      - name: "Move issue to 'Todo' column in associated projects"
        if: env.WORKLOAD_SET == 'true' && env.PRIORITY_SET == 'true'
        run: |
            project_ids=$(echo '${{ steps.find_projects.outputs.project_node_ids }}' | jq -r '.data.organization.projectsV2.nodes[].id')
            echo "project_ids=$project_ids"
            for project_id in $project_ids; do
              echo "project_id is $project_id"
              issues=$(curl --request POST \
                            --url https://api.github.com/graphql \
                            --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                            --data '{"query":
                                "{node(id: \"'$project_id'\") { ... on ProjectV2 {items(first: 20) { nodes{ id fieldValues(first: 8) { nodes{ ... on ProjectV2ItemFieldTextValue { text field { ... on ProjectV2FieldCommon { name }}} ... on ProjectV2ItemFieldDateValue { date field { ... on ProjectV2FieldCommon { name } } } ... on ProjectV2ItemFieldSingleSelectValue { name field { ... on ProjectV2FieldCommon { name }}}}} content{ ... on Issue {title id}} } } } } }"}')
              echo "issues=$issues"
            done
