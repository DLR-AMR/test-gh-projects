name: "Move the Issue after workload and urgency is evaluated"

on:
  issues:
    types: [labeled]

jobs:
  evaluate:
    runs-on: ubuntu-latest
    steps:
      - name: "Get all labels of the Issue"
        id: get_labels
        run: |
          labels=$(curl -s -H "Authorization: token ${{ secrets.T8DDY_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/labels" | jq -r '.[].name')
          echo "::set-output name=labels::${labels}"
      - name: "Check if workload is set"
        id: check_workload
        run: |
          if [[ "${{ steps.get_labels.outputs.labels }}" == *"workload:high"* || "${{ steps.get_labels.outputs.labels }}" == *"workload:medium"* || "${{ steps.get_labels.outputs.labels }}" == *"workload:low"* ]]; then
            echo "Workload label is set"
            echo "::set-env name=WORKLOAD_SET::true"
          else
            echo "Workload label is not set"
            echo "::set-env name=WORKLOAD_SET::false"
          fi
      - name: "Check if priority is set"
        id: check_urgency
        run: |
          if [[ "${{ steps.get_labels.outputs.labels }}" == *"priority:high"* || "${{ steps.get_labels.outputs.labels }}" == *"priority:medium"* || "${{ steps.get_labels.outputs.labels }}" == *"priority:low"* ]]; then
            echo "Priority label is set"
            echo "::set-env name=PRIORITY_SET::true"
          else
            echo "priority label is not set"
            echo "::set-env name=PRIORITY_SET::false"
          fi
      - name: "Find associated Projects"
        id: find_projects
        run: |
          projects=$(curl -s -H "Authorization: token ${{ secrets.T8DDY_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/projects" | jq -r '.[].name')
          echo "::set-output name=projects::${projects}"
      - name: "Move issue to 'Todo' column in associated projects"
        if: env.WORKLOAD_SET == 'true' && env.PRIORITY_SET == 'true'
        run: |
          for project in ${{ steps.find_projects.outputs.projects }}; do
            project_id=$(curl -s -H "Authorization: token ${{ secrets.T8DDY_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/projects" | jq -r ".[] | select(.name==\"$project\") | .id")
        
            column_id=$(curl -s -H "Authorization: token ${{ secrets.T8DDY_TOKENN }}" \
            "https://api.github.com/projects/$project_id/columns" | jq -r '.[] | select(.name=="Todo") | .id')
        
            if [ -n "$column_id" ]; then
              curl -s -X POST -H "Authorization: token ${{ secrets.T8DDY_TOKEN }}" \
              -H "Accept: application/vnd.github.inertia-preview+json" \
              "https://api.github.com/projects/columns/$column_id/cards" \
              -d "{\"content_id\":${{ github.event.issue.id }},\"content_type\":\"Issue\"}"
            fi
          done
