name: Move an Issue Card to a different Column triggered by an Issue event

on:
    workflow_call:
        inputs:
            ISSUE_NODE_ID:
                required: true
                type: string
                description: 'The node id of the issue that triggered the workflow'
            COLUMN_NAME:
                required: true
                type: choice
                options: ['In-Box', 'ToDo', 'In Progress']
                default: 'In-Box'
                description: 'The name of the column to move the issue card to'
            PRIORITY:
                required: true
                type: choice
                options: ['high', 'medium', 'low', 'NONE']
                default: 'NONE'
                description: 'The priority of the issue'
            WORKLOAD:
                required: true
                type: choice
                options: ['high', 'medium', 'low', 'NONE']
                default: 'NONE'
                description: 'The workload of the issue'


jobs:
  Move_card:
    runs-on: ubuntu-latest
    steps:
        - name: "Find associated Projects"
          id: find_projects
          run: |
            # Get the projects associated with the organization
            projects=$(curl --request POST \
                --url https://api.github.com/graphql \
                --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                --data '{"query":"{organization(login: \"DLR-AMR\") {projectsV2(first: 20) {nodes {id title}}}}"}')
            echo "projects=$projects">> $GITHUB_OUTPUT
        - name: "Move issue to specified column in associated projects"
            run: |
                # Get the project IDs
                project_ids=$(echo "${{ steps.find_projects.outputs.projects }}" | jq -r '.data.organization.projectsV2.nodes[].id')
                for project_id in $project_ids; do
                    echo "project_id is $project_id"
                    # Get the issues within the project
                    issues=$(curl --request POST \
                        --url https://api.github.com/graphql \
                        --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                        --data "{\"query\":\"{ node(id: \\\"$project_id\\\") { ... on ProjectV2 { items(first: 100) { nodes { id fieldValues(first: 8) { nodes { ... on ProjectV2ItemFieldTextValue { text field { ... on ProjectV2FieldCommon { name } } } ... on ProjectV2ItemFieldDateValue { date field { ... on ProjectV2FieldCommon { name } } } ... on ProjectV2ItemFieldSingleSelectValue { name field { ... on ProjectV2FieldCommon { name } } } } } content { ... on Issue { id } } } } } } }\"}")
                    echo "issues=$issues"
                    # Extract the issue ids and PVII ids. The issue_id is the global_id, the PVII id is the project specific id
                    issue_ids=$(echo $issues | jq -r '.data.node.items.nodes[].content.id')
                    PVII_ids=$(echo $issues | jq -r '.data.node.items.nodes[].id')
                    # In the following loop we need both values, so we combine them into a single string
                    combined_ids=$(paste -d, <(echo "$issue_ids") <(echo "$PVII_ids"))
                    for combined_id in $combined_ids; do
                        issue_id=$(echo $combined_id | cut -d, -f1)
                        echo "issue_id is $issue_id"
                        PVII_id=$(echo $combined_id | cut -d, -f2)
                        echo "PVII_id is $PVII_id"
                        # Check if the issue_id is the same as the one in the pull request
                        if [ "$issue_id" == "${{ github.event.inputs.ISSUE_NODE_ID }}" ]; then
                                              # Get the detailed project information
                            detailed_project=$(curl --request POST \
                                --url https://api.github.com/graphql \
                                --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                                --data "{\"query\":\"{ node(id: \\\"$project_id\\\") { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }\"}")
                            echo "detailed_project=$detailed_project"
                            # Extract the status field id
                            status_field_id=$(echo $detailed_project | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')
                            Option_id=$(echo $detailed_project | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "${{ github.event.inputs.COLUMN_NAME }}") | .id')
                            echo "Option_id is $Option_id"
                            echo "change field $status_field_id of issue $issue_id in project $project_id to '${{ github.event.inputs.COLUMN_NAME }}'"
                            # Move the issue to the specified column
                            priority_message=""
                            workload_message=""
                            if [ '${{ github.event.inputs.PRIORITY }}' != 'NONE' ]; then
                                priority_field_id=$(echo $detailed_project | jq -r '.data.node.fields.nodes[] | select(.name == "Priority") | .id')
                                priority_option_id=$(echo $detailed_project | jq -r '.data.node.fields.nodes[] | select(.name == "Priority") | .options[] | select(.name == "${{ github.event.inputs.PRIORITY }}") | .id')
                                priority_message="updateProjectV2ItemFieldValue1: updateProjectV2ItemFieldValue(input: {projectId: \"'$project_id'\", itemId: \"'$PVII_id'\", fieldId: \"'$priority_field_id'\", value: { singleSelectOptionId: \"'$priority_option_id'\"}}) {projectV2Item {id}}"
                                echo "priority_message is $priority_message"
                            fi
                            if [ '${{ github.event.inputs.WORKLOAD }}' != 'NONE' ]; then
                                workload_field_id=$(echo $detailed_project | jq -r '.data.node.fields.nodes[] | select(.name == "Workload") | .id')
                                workload_option_id=$(echo $detailed_project | jq -r '.data.node.fields.nodes[] | select(.name == "Workload") | .options[] | select(.name == "${{ github.event.inputs.WORKLOAD }}") | .id')
                                workload_message="updateProjectV2ItemFieldValue2: updateProjectV2ItemFieldValue(input: {projectId: \"'$project_id'\", itemId: \"'$PVII_id'\", fieldId: \"'$workload_field_id'\", value: { singleSelectOptionId: \"'$workload_option_id'\"}}) {projectV2Item {id}}"
                                echo "workload_message is $workload_message"
                            fi
                            status_message="updateProjectV2ItemFieldValue(input: {projectId: \"'$project_id'\", itemId: \"'$PVII_id'\", fieldId: \"'$status_field_id'\", value: { singleSelectOptionId: \"'$Option_id'\"}}) {projectV2Item {id}}"
                            query="{\"query\":\"mutation { $status_message $priority_message $workload_message }\"}"
                            response=$(curl --request POST \
                                --url https://api.github.com/graphql \
                                --header "Authorization: Bearer ${{ secrets.TEST_SECRET }}" \
                                --data "$query")
                            echo "response=$response"
                        fi
                    done
                done